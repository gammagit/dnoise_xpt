pred_ii <- NULL
pred_ii$one <- extract(subfit$one, paste('mu_trans[',ix,']', sep=''))
pred_ii$one <- unlist(pred_ii$one, use.names=FALSE)
pred_ii$two <- extract(subfit$two, paste('mu_trans[',ix,']', sep=''))
pred_ii$two <- unlist(pred_ii$two, use.names=FALSE)
pred_ii$three <- extract(subfit$three, paste('mu_trans[',ix,']', sep=''))
pred_ii$three <- unlist(pred_ii$three, use.names=FALSE)
# Compute confidence intervals
ci_ii <- NULL
ci_ii$one <- quantile(pred_ii$one, c(0.025,0.975), names = FALSE)
ci_ii$two <- quantile(pred_ii$two, c(0.025,0.975), names = FALSE)
ci_ii$three <- quantile(pred_ii$three, c(0.025,0.975), names = FALSE)
# Plot means & confidence intervals
snrs <- c(1,2,3) # signal-to-noise ratios for one, two & three
mean_rts <- c(mean(pred_ii$one),
mean(pred_ii$two),
mean(pred_ii$three))
ci_low <- c(ci_ii$one[1], ci_ii$two[1], ci_ii$three[1]) # lower confidence interval
ci_up <- c(ci_ii$one[2], ci_ii$two[2], ci_ii$three[2]) # upper confidence interval
df_ii <- data.frame(condition=snrs, rt = mean_rts, low = ci_low, up = ci_up, subject=rep(ix,3))
ph <- ph + geom_point(data=df_ii, aes(x=condition, y=rt), shape=21, size=2, fill="white", alpha=0.5) +
geom_errorbar(data=df_ii, width=.1, aes(x=condition, ymin=low, ymax=up), alpha=0.5)
all_plots[[ix]] <- ph
}
grid.arrange(grobs=all_plots, ncol=4, left="Estimated mu (Correct)",
bottom="Signal-to-noise ratio",
top="Estimated LR and mu (VarSignal)")
# Plot individual and group slope
mu_beta_mu <- summary(lrfit, pars=c("mu_beta_mu"))$summary
mean_mu_mu <- mu_beta_mu["mu_beta_mu", "mean"]
q025_mu_mu <- mu_beta_mu["mu_beta_mu", "2.5%"]
q975_mu_mu <- mu_beta_mu["mu_beta_mu", "97.5%"]
df_mu_mu <- data.frame(subid = 0, mean = mean_mu_mu, q025 = q025_mu_mu, q975 = q975_mu_mu)
pslopes <- ggplot(df_slopes, aes(x=subid, y=mean)) +
geom_point(aes(x=subid, y=mean), shape=21, size=3, fill="white") +
geom_errorbar(width=.2, aes(ymin=q025, ymax=q975), alpha=0.5) +
geom_point(data=df_mu_mu, aes(x=subid, y=mean), shape=21, size=3, fill="red") +
geom_errorbar(data=df_mu_mu, width=.2, aes(ymin=q025, ymax=q975), col="red", alpha=0.5) +
geom_hline(yintercept=0, linetype=2) +
ggtitle(expression(paste("Estimated ", beta[1], " for each participant (VarSignal)"))) +
xlab("Subject") +
ylab(expression(paste("Slope (ms / ", Delta," snr)"))) +
theme_bw() +
scale_x_continuous(breaks=c(0,seq(2,16,by=2)), labels=c("Group", "2", "4", "6", "8", "10", "12", "14", "16"))
print(pslopes)
dev.off()
pdf(file="lr_varsig.pdf")
load('meeting_27_03_17/subfit_ml_varsig.RData')
mu_pred_samples <- extract(lrfit, 'mu_pred')
all_plots <- list()
df_slopes <- NULL
for (ix in subslist) {
# Get mean slope & intercept from fit
beta_mu_ix <- summary(lrfit, pars=c(paste("beta_mu[", ix, ",1]", sep=""), paste("beta_mu[", ix,",2]", sep="")))$summary
mean_inter <- beta_mu_ix[paste("beta_mu[", ix, ",1]", sep=""), "mean"]
mean_slope <- beta_mu_ix[paste("beta_mu[", ix, ",2]", sep=""), "mean"]
q025_slope <- beta_mu_ix[paste("beta_mu[", ix, ",2]", sep=""), "2.5%"]
q975_slope <- beta_mu_ix[paste("beta_mu[", ix, ",2]", sep=""), "97.5%"]
df_slope_ix <- data.frame(subid = ix, mean = mean_slope, q025 = q025_slope, q975 = q975_slope)
df_slopes <- rbind(df_slopes, df_slope_ix)
# Get confidence intervals based on samples from fit
mu_pred_ix <- mu_pred_samples$mu_pred[,ix,]
quant_ix <- apply(mu_pred_ix, 2, quantile, probs=c(0.025,0.5,0.975))
df_ix <- data.frame(mu = quant_ix[2,], lowmu = quant_ix[1,], upmu = quant_ix[3,], snr=seq(0,30)/10)
ph <- ggplot(df_ix, aes(snr)) +
geom_ribbon(aes(ymin=lowmu, ymax=upmu), fill="gray50", alpha=0.7) +
geom_abline(intercept = mean_inter, slope = mean_slope, size=1, col="firebrick2") +
#           ylim(c(600,1200)) +
theme_bw() +
theme(axis.title.y=element_blank(), axis.title.x=element_blank()) +
scale_x_continuous(breaks=c(1,2,3), labels=c("l", "m", "h"), limits=c(0.9,3.1))
# Plot estimated means
pred_ii <- NULL
pred_ii$one <- extract(subfit$one, paste('mu_trans[',ix,']', sep=''))
pred_ii$one <- unlist(pred_ii$one, use.names=FALSE)
pred_ii$two <- extract(subfit$two, paste('mu_trans[',ix,']', sep=''))
pred_ii$two <- unlist(pred_ii$two, use.names=FALSE)
pred_ii$three <- extract(subfit$three, paste('mu_trans[',ix,']', sep=''))
pred_ii$three <- unlist(pred_ii$three, use.names=FALSE)
# Compute confidence intervals
ci_ii <- NULL
ci_ii$one <- quantile(pred_ii$one, c(0.025,0.975), names = FALSE)
ci_ii$two <- quantile(pred_ii$two, c(0.025,0.975), names = FALSE)
ci_ii$three <- quantile(pred_ii$three, c(0.025,0.975), names = FALSE)
# Plot means & confidence intervals
snrs <- c(1,2,3) # signal-to-noise ratios for one, two & three
mean_rts <- c(mean(pred_ii$one),
mean(pred_ii$two),
mean(pred_ii$three))
ci_low <- c(ci_ii$one[1], ci_ii$two[1], ci_ii$three[1]) # lower confidence interval
ci_up <- c(ci_ii$one[2], ci_ii$two[2], ci_ii$three[2]) # upper confidence interval
df_ii <- data.frame(condition=snrs, rt = mean_rts, low = ci_low, up = ci_up, subject=rep(ix,3))
ph <- ph + geom_point(data=df_ii, aes(x=condition, y=rt), shape=21, size=2, fill="white", alpha=0.5) +
geom_errorbar(data=df_ii, width=.1, aes(x=condition, ymin=low, ymax=up), alpha=0.5)
all_plots[[ix]] <- ph
}
grid.arrange(grobs=all_plots, ncol=4, left="Estimated mu (Correct)",
bottom="Signal-to-noise ratio",
top="Estimated LR and mu (VarSignal)")
# Plot individual and group slope
mu_beta_mu <- summary(lrfit, pars=c("mu_beta_mu"))$summary
mean_mu_mu <- mu_beta_mu["mu_beta_mu", "mean"]
q025_mu_mu <- mu_beta_mu["mu_beta_mu", "2.5%"]
q975_mu_mu <- mu_beta_mu["mu_beta_mu", "97.5%"]
df_mu_mu <- data.frame(subid = 0, mean = mean_mu_mu, q025 = q025_mu_mu, q975 = q975_mu_mu)
pslopes <- ggplot(df_slopes, aes(x=subid, y=mean)) +
geom_point(aes(x=subid, y=mean), shape=21, size=3, fill="white") +
geom_errorbar(width=.2, aes(ymin=q025, ymax=q975), alpha=0.5) +
geom_point(data=df_mu_mu, aes(x=subid, y=mean), shape=21, size=3, fill="red") +
geom_errorbar(data=df_mu_mu, width=.2, aes(ymin=q025, ymax=q975), col="red", alpha=0.5) +
geom_hline(yintercept=0, linetype=2) +
ggtitle(expression(paste("Estimated ", beta[1], " for each participant (VarSignal)"))) +
xlab("Subject") +
ylab(expression(paste("Slope (ms / ", Delta," snr)"))) +
theme_bw() +
scale_x_continuous(breaks=c(0,seq(2,16,by=2)), labels=c("Group", "2", "4", "6", "8", "10", "12", "14", "16"))
print(pslopes)
dev.off()
pdf(file="lr_varsig.pdf")
load('meeting_27_03_17/subfit_ml_varsig.RData')
mu_pred_samples <- extract(lrfit, 'mu_pred')
all_plots <- list()
df_slopes <- NULL
for (ix in subslist) {
# Get mean slope & intercept from fit
beta_mu_ix <- summary(lrfit, pars=c(paste("beta_mu[", ix, ",1]", sep=""), paste("beta_mu[", ix,",2]", sep="")))$summary
mean_inter <- beta_mu_ix[paste("beta_mu[", ix, ",1]", sep=""), "mean"]
mean_slope <- beta_mu_ix[paste("beta_mu[", ix, ",2]", sep=""), "mean"]
q025_slope <- beta_mu_ix[paste("beta_mu[", ix, ",2]", sep=""), "2.5%"]
q975_slope <- beta_mu_ix[paste("beta_mu[", ix, ",2]", sep=""), "97.5%"]
df_slope_ix <- data.frame(subid = ix, mean = mean_slope, q025 = q025_slope, q975 = q975_slope)
df_slopes <- rbind(df_slopes, df_slope_ix)
# Get confidence intervals based on samples from fit
mu_pred_ix <- mu_pred_samples$mu_pred[,ix,]
quant_ix <- apply(mu_pred_ix, 2, quantile, probs=c(0.025,0.5,0.975))
df_ix <- data.frame(mu = quant_ix[2,], lowmu = quant_ix[1,], upmu = quant_ix[3,], snr=seq(0,30)/10)
ph <- ggplot(df_ix, aes(snr)) +
geom_ribbon(aes(ymin=lowmu, ymax=upmu), fill="gray50", alpha=0.3) +
geom_abline(intercept = mean_inter, slope = mean_slope, size=1, col="firebrick2") +
#           ylim(c(600,1200)) +
theme_bw() +
theme(axis.title.y=element_blank(), axis.title.x=element_blank()) +
scale_x_continuous(breaks=c(1,2,3), labels=c("l", "m", "h"), limits=c(0.9,3.1))
# Plot estimated means
pred_ii <- NULL
pred_ii$one <- extract(subfit$one, paste('mu_trans[',ix,']', sep=''))
pred_ii$one <- unlist(pred_ii$one, use.names=FALSE)
pred_ii$two <- extract(subfit$two, paste('mu_trans[',ix,']', sep=''))
pred_ii$two <- unlist(pred_ii$two, use.names=FALSE)
pred_ii$three <- extract(subfit$three, paste('mu_trans[',ix,']', sep=''))
pred_ii$three <- unlist(pred_ii$three, use.names=FALSE)
# Compute confidence intervals
ci_ii <- NULL
ci_ii$one <- quantile(pred_ii$one, c(0.025,0.975), names = FALSE)
ci_ii$two <- quantile(pred_ii$two, c(0.025,0.975), names = FALSE)
ci_ii$three <- quantile(pred_ii$three, c(0.025,0.975), names = FALSE)
# Plot means & confidence intervals
snrs <- c(1,2,3) # signal-to-noise ratios for one, two & three
mean_rts <- c(mean(pred_ii$one),
mean(pred_ii$two),
mean(pred_ii$three))
ci_low <- c(ci_ii$one[1], ci_ii$two[1], ci_ii$three[1]) # lower confidence interval
ci_up <- c(ci_ii$one[2], ci_ii$two[2], ci_ii$three[2]) # upper confidence interval
df_ii <- data.frame(condition=snrs, rt = mean_rts, low = ci_low, up = ci_up, subject=rep(ix,3))
ph <- ph + geom_point(data=df_ii, aes(x=condition, y=rt), shape=21, size=2, fill="white", alpha=0.5) +
geom_errorbar(data=df_ii, width=.1, aes(x=condition, ymin=low, ymax=up), alpha=0.5)
all_plots[[ix]] <- ph
}
grid.arrange(grobs=all_plots, ncol=4, left="Estimated mu (Correct)",
bottom="Signal-to-noise ratio",
top="Estimated LR and mu (VarSignal)")
# Plot individual and group slope
mu_beta_mu <- summary(lrfit, pars=c("mu_beta_mu"))$summary
mean_mu_mu <- mu_beta_mu["mu_beta_mu", "mean"]
q025_mu_mu <- mu_beta_mu["mu_beta_mu", "2.5%"]
q975_mu_mu <- mu_beta_mu["mu_beta_mu", "97.5%"]
df_mu_mu <- data.frame(subid = 0, mean = mean_mu_mu, q025 = q025_mu_mu, q975 = q975_mu_mu)
pslopes <- ggplot(df_slopes, aes(x=subid, y=mean)) +
geom_point(aes(x=subid, y=mean), shape=21, size=3, fill="white") +
geom_errorbar(width=.2, aes(ymin=q025, ymax=q975), alpha=0.5) +
geom_point(data=df_mu_mu, aes(x=subid, y=mean), shape=21, size=3, fill="red") +
geom_errorbar(data=df_mu_mu, width=.2, aes(ymin=q025, ymax=q975), col="red", alpha=0.5) +
geom_hline(yintercept=0, linetype=2) +
ggtitle(expression(paste("Estimated ", beta[1], " for each participant (VarSignal)"))) +
xlab("Subject") +
ylab(expression(paste("Slope (ms / ", Delta," snr)"))) +
theme_bw() +
scale_x_continuous(breaks=c(0,seq(2,16,by=2)), labels=c("Group", "2", "4", "6", "8", "10", "12", "14", "16"))
print(pslopes)
dev.off()
pdf(file="lr_varsig.pdf")
load('meeting_27_03_17/subfit_ml_varsig.RData')
mu_pred_samples <- extract(lrfit, 'mu_pred')
all_plots <- list()
df_slopes <- NULL
for (ix in subslist) {
# Get mean slope & intercept from fit
beta_mu_ix <- summary(lrfit, pars=c(paste("beta_mu[", ix, ",1]", sep=""), paste("beta_mu[", ix,",2]", sep="")))$summary
mean_inter <- beta_mu_ix[paste("beta_mu[", ix, ",1]", sep=""), "mean"]
mean_slope <- beta_mu_ix[paste("beta_mu[", ix, ",2]", sep=""), "mean"]
q025_slope <- beta_mu_ix[paste("beta_mu[", ix, ",2]", sep=""), "2.5%"]
q975_slope <- beta_mu_ix[paste("beta_mu[", ix, ",2]", sep=""), "97.5%"]
df_slope_ix <- data.frame(subid = ix, mean = mean_slope, q025 = q025_slope, q975 = q975_slope)
df_slopes <- rbind(df_slopes, df_slope_ix)
# Get confidence intervals based on samples from fit
mu_pred_ix <- mu_pred_samples$mu_pred[,ix,]
quant_ix <- apply(mu_pred_ix, 2, quantile, probs=c(0.025,0.5,0.975))
df_ix <- data.frame(mu = quant_ix[2,], lowmu = quant_ix[1,], upmu = quant_ix[3,], snr=seq(0,30)/10)
ph <- ggplot(df_ix, aes(snr)) +
geom_ribbon(aes(ymin=lowmu, ymax=upmu), fill="gray50", alpha=0.4) +
geom_abline(intercept = mean_inter, slope = mean_slope, size=1, col="firebrick2") +
#           ylim(c(600,1200)) +
theme_bw() +
theme(axis.title.y=element_blank(), axis.title.x=element_blank()) +
scale_x_continuous(breaks=c(1,2,3), labels=c("l", "m", "h"), limits=c(0.9,3.1))
# Plot estimated means
pred_ii <- NULL
pred_ii$one <- extract(subfit$one, paste('mu_trans[',ix,']', sep=''))
pred_ii$one <- unlist(pred_ii$one, use.names=FALSE)
pred_ii$two <- extract(subfit$two, paste('mu_trans[',ix,']', sep=''))
pred_ii$two <- unlist(pred_ii$two, use.names=FALSE)
pred_ii$three <- extract(subfit$three, paste('mu_trans[',ix,']', sep=''))
pred_ii$three <- unlist(pred_ii$three, use.names=FALSE)
# Compute confidence intervals
ci_ii <- NULL
ci_ii$one <- quantile(pred_ii$one, c(0.025,0.975), names = FALSE)
ci_ii$two <- quantile(pred_ii$two, c(0.025,0.975), names = FALSE)
ci_ii$three <- quantile(pred_ii$three, c(0.025,0.975), names = FALSE)
# Plot means & confidence intervals
snrs <- c(1,2,3) # signal-to-noise ratios for one, two & three
mean_rts <- c(mean(pred_ii$one),
mean(pred_ii$two),
mean(pred_ii$three))
ci_low <- c(ci_ii$one[1], ci_ii$two[1], ci_ii$three[1]) # lower confidence interval
ci_up <- c(ci_ii$one[2], ci_ii$two[2], ci_ii$three[2]) # upper confidence interval
df_ii <- data.frame(condition=snrs, rt = mean_rts, low = ci_low, up = ci_up, subject=rep(ix,3))
ph <- ph + geom_point(data=df_ii, aes(x=condition, y=rt), shape=21, size=2, fill="white", alpha=0.5) +
geom_errorbar(data=df_ii, width=.1, aes(x=condition, ymin=low, ymax=up), alpha=0.5)
all_plots[[ix]] <- ph
}
grid.arrange(grobs=all_plots, ncol=4, left="Estimated mu (Correct)",
bottom="Signal-to-noise ratio",
top="Estimated LR and mu (VarSignal)")
# Plot individual and group slope
mu_beta_mu <- summary(lrfit, pars=c("mu_beta_mu"))$summary
mean_mu_mu <- mu_beta_mu["mu_beta_mu", "mean"]
q025_mu_mu <- mu_beta_mu["mu_beta_mu", "2.5%"]
q975_mu_mu <- mu_beta_mu["mu_beta_mu", "97.5%"]
df_mu_mu <- data.frame(subid = 0, mean = mean_mu_mu, q025 = q025_mu_mu, q975 = q975_mu_mu)
pslopes <- ggplot(df_slopes, aes(x=subid, y=mean)) +
geom_point(aes(x=subid, y=mean), shape=21, size=3, fill="white") +
geom_errorbar(width=.2, aes(ymin=q025, ymax=q975), alpha=0.5) +
geom_point(data=df_mu_mu, aes(x=subid, y=mean), shape=21, size=3, fill="red") +
geom_errorbar(data=df_mu_mu, width=.2, aes(ymin=q025, ymax=q975), col="red", alpha=0.5) +
geom_hline(yintercept=0, linetype=2) +
ggtitle(expression(paste("Estimated ", beta[1], " for each participant (VarSignal)"))) +
xlab("Subject") +
ylab(expression(paste("Slope (ms / ", Delta," snr)"))) +
theme_bw() +
scale_x_continuous(breaks=c(0,seq(2,16,by=2)), labels=c("Group", "2", "4", "6", "8", "10", "12", "14", "16"))
print(pslopes)
dev.off()
pdf(file="lr_varsig.pdf")
load('meeting_27_03_17/subfit_ml_varsig.RData')
mu_pred_samples <- extract(lrfit, 'mu_pred')
all_plots <- list()
df_slopes <- NULL
for (ix in subslist) {
# Get mean slope & intercept from fit
beta_mu_ix <- summary(lrfit, pars=c(paste("beta_mu[", ix, ",1]", sep=""), paste("beta_mu[", ix,",2]", sep="")))$summary
mean_inter <- beta_mu_ix[paste("beta_mu[", ix, ",1]", sep=""), "mean"]
mean_slope <- beta_mu_ix[paste("beta_mu[", ix, ",2]", sep=""), "mean"]
q025_slope <- beta_mu_ix[paste("beta_mu[", ix, ",2]", sep=""), "2.5%"]
q975_slope <- beta_mu_ix[paste("beta_mu[", ix, ",2]", sep=""), "97.5%"]
df_slope_ix <- data.frame(subid = ix, mean = mean_slope, q025 = q025_slope, q975 = q975_slope)
df_slopes <- rbind(df_slopes, df_slope_ix)
# Get confidence intervals based on samples from fit
mu_pred_ix <- mu_pred_samples$mu_pred[,ix,]
quant_ix <- apply(mu_pred_ix, 2, quantile, probs=c(0.025,0.5,0.975))
df_ix <- data.frame(mu = quant_ix[2,], lowmu = quant_ix[1,], upmu = quant_ix[3,], snr=seq(0,30)/10)
ph <- ggplot(df_ix, aes(snr)) +
geom_ribbon(aes(ymin=lowmu, ymax=upmu), fill="gray50", alpha=0.4) +
geom_abline(intercept = mean_inter, slope = mean_slope, size=1, col="firebrick2") +
#           ylim(c(600,1200)) +
theme_bw() +
theme(axis.title.y=element_blank(), axis.title.x=element_blank()) +
scale_x_continuous(breaks=c(1,2,3), labels=c("l", "m", "h"), limits=c(0.9,3.1))
# Plot estimated means
pred_ii <- NULL
pred_ii$one <- extract(subfit$one, paste('mu_trans[',ix,']', sep=''))
pred_ii$one <- unlist(pred_ii$one, use.names=FALSE)
pred_ii$two <- extract(subfit$two, paste('mu_trans[',ix,']', sep=''))
pred_ii$two <- unlist(pred_ii$two, use.names=FALSE)
pred_ii$three <- extract(subfit$three, paste('mu_trans[',ix,']', sep=''))
pred_ii$three <- unlist(pred_ii$three, use.names=FALSE)
# Compute confidence intervals
ci_ii <- NULL
ci_ii$one <- quantile(pred_ii$one, c(0.025,0.975), names = FALSE)
ci_ii$two <- quantile(pred_ii$two, c(0.025,0.975), names = FALSE)
ci_ii$three <- quantile(pred_ii$three, c(0.025,0.975), names = FALSE)
# Plot means & confidence intervals
snrs <- c(1,2,3) # signal-to-noise ratios for one, two & three
mean_rts <- c(mean(pred_ii$one),
mean(pred_ii$two),
mean(pred_ii$three))
ci_low <- c(ci_ii$one[1], ci_ii$two[1], ci_ii$three[1]) # lower confidence interval
ci_up <- c(ci_ii$one[2], ci_ii$two[2], ci_ii$three[2]) # upper confidence interval
df_ii <- data.frame(condition=snrs, rt = mean_rts, low = ci_low, up = ci_up, subject=rep(ix,3))
ph <- ph + geom_point(data=df_ii, aes(x=condition, y=rt), shape=21, size=2, fill="white", alpha=0.5) +
geom_errorbar(data=df_ii, width=.2, aes(x=condition, ymin=low, ymax=up), alpha=0.5)
all_plots[[ix]] <- ph
}
grid.arrange(grobs=all_plots, ncol=4, left="Estimated mu (Correct)",
bottom="Signal-to-noise ratio",
top="Estimated LR and mu (VarSignal)")
# Plot individual and group slope
mu_beta_mu <- summary(lrfit, pars=c("mu_beta_mu"))$summary
mean_mu_mu <- mu_beta_mu["mu_beta_mu", "mean"]
q025_mu_mu <- mu_beta_mu["mu_beta_mu", "2.5%"]
q975_mu_mu <- mu_beta_mu["mu_beta_mu", "97.5%"]
df_mu_mu <- data.frame(subid = 0, mean = mean_mu_mu, q025 = q025_mu_mu, q975 = q975_mu_mu)
pslopes <- ggplot(df_slopes, aes(x=subid, y=mean)) +
geom_point(aes(x=subid, y=mean), shape=21, size=3, fill="white") +
geom_errorbar(width=.2, aes(ymin=q025, ymax=q975), alpha=0.5) +
geom_point(data=df_mu_mu, aes(x=subid, y=mean), shape=21, size=3, fill="red") +
geom_errorbar(data=df_mu_mu, width=.2, aes(ymin=q025, ymax=q975), col="red", alpha=0.5) +
geom_hline(yintercept=0, linetype=2) +
ggtitle(expression(paste("Estimated ", beta[1], " for each participant (VarSignal)"))) +
xlab("Subject") +
ylab(expression(paste("Slope (ms / ", Delta," snr)"))) +
theme_bw() +
scale_x_continuous(breaks=c(0,seq(2,16,by=2)), labels=c("Group", "2", "4", "6", "8", "10", "12", "14", "16"))
print(pslopes)
dev.off()
pdf(file="lr_varsig.pdf")
load('meeting_27_03_17/subfit_ml_varsig.RData')
mu_pred_samples <- extract(lrfit, 'mu_pred')
all_plots <- list()
df_slopes <- NULL
for (ix in subslist) {
# Get mean slope & intercept from fit
beta_mu_ix <- summary(lrfit, pars=c(paste("beta_mu[", ix, ",1]", sep=""), paste("beta_mu[", ix,",2]", sep="")))$summary
mean_inter <- beta_mu_ix[paste("beta_mu[", ix, ",1]", sep=""), "mean"]
mean_slope <- beta_mu_ix[paste("beta_mu[", ix, ",2]", sep=""), "mean"]
q025_slope <- beta_mu_ix[paste("beta_mu[", ix, ",2]", sep=""), "2.5%"]
q975_slope <- beta_mu_ix[paste("beta_mu[", ix, ",2]", sep=""), "97.5%"]
df_slope_ix <- data.frame(subid = ix, mean = mean_slope, q025 = q025_slope, q975 = q975_slope)
df_slopes <- rbind(df_slopes, df_slope_ix)
# Get confidence intervals based on samples from fit
mu_pred_ix <- mu_pred_samples$mu_pred[,ix,]
quant_ix <- apply(mu_pred_ix, 2, quantile, probs=c(0.025,0.5,0.975))
df_ix <- data.frame(mu = quant_ix[2,], lowmu = quant_ix[1,], upmu = quant_ix[3,], snr=seq(0,30)/10)
ph <- ggplot(df_ix, aes(snr)) +
geom_ribbon(aes(ymin=lowmu, ymax=upmu), fill="gray50", alpha=0.4) +
geom_abline(intercept = mean_inter, slope = mean_slope, size=1, col="firebrick2") +
theme_bw() +
theme(axis.title.y=element_blank(), axis.title.x=element_blank()) +
scale_x_continuous(breaks=c(1,2,3), labels=c("l", "m", "h"), limits=c(0.9,3.1))
# Plot estimated means
pred_ii <- NULL
pred_ii$one <- extract(subfit$one, paste('mu_trans[',ix,']', sep=''))
pred_ii$one <- unlist(pred_ii$one, use.names=FALSE)
pred_ii$two <- extract(subfit$two, paste('mu_trans[',ix,']', sep=''))
pred_ii$two <- unlist(pred_ii$two, use.names=FALSE)
pred_ii$three <- extract(subfit$three, paste('mu_trans[',ix,']', sep=''))
pred_ii$three <- unlist(pred_ii$three, use.names=FALSE)
# Compute confidence intervals
ci_ii <- NULL
ci_ii$one <- quantile(pred_ii$one, c(0.025,0.975), names = FALSE)
ci_ii$two <- quantile(pred_ii$two, c(0.025,0.975), names = FALSE)
ci_ii$three <- quantile(pred_ii$three, c(0.025,0.975), names = FALSE)
# Plot means & confidence intervals
snrs <- c(1,2,3) # signal-to-noise ratios for one, two & three
mean_rts <- c(mean(pred_ii$one),
mean(pred_ii$two),
mean(pred_ii$three))
ci_low <- c(ci_ii$one[1], ci_ii$two[1], ci_ii$three[1]) # lower confidence interval
ci_up <- c(ci_ii$one[2], ci_ii$two[2], ci_ii$three[2]) # upper confidence interval
df_ii <- data.frame(condition=snrs, rt = mean_rts, low = ci_low, up = ci_up, subject=rep(ix,3))
ph <- ph + geom_point(data=df_ii, aes(x=condition, y=rt), shape=21, size=3, fill="white", alpha=0.5) +
geom_errorbar(data=df_ii, width=.2, aes(x=condition, ymin=low, ymax=up), alpha=0.5)
all_plots[[ix]] <- ph
}
grid.arrange(grobs=all_plots, ncol=4, left="Estimated mu (Correct)",
bottom="Signal-to-noise ratio",
top="Estimated LR and mu (VarSignal)")
# Plot individual and group slope
mu_beta_mu <- summary(lrfit, pars=c("mu_beta_mu"))$summary
mean_mu_mu <- mu_beta_mu["mu_beta_mu", "mean"]
q025_mu_mu <- mu_beta_mu["mu_beta_mu", "2.5%"]
q975_mu_mu <- mu_beta_mu["mu_beta_mu", "97.5%"]
df_mu_mu <- data.frame(subid = 0, mean = mean_mu_mu, q025 = q025_mu_mu, q975 = q975_mu_mu)
pslopes <- ggplot(df_slopes, aes(x=subid, y=mean)) +
geom_point(aes(x=subid, y=mean), shape=21, size=3, fill="white") +
geom_errorbar(width=.2, aes(ymin=q025, ymax=q975), alpha=0.5) +
geom_point(data=df_mu_mu, aes(x=subid, y=mean), shape=21, size=3, fill="red") +
geom_errorbar(data=df_mu_mu, width=.2, aes(ymin=q025, ymax=q975), col="red", alpha=0.5) +
geom_hline(yintercept=0, linetype=2) +
ggtitle(expression(paste("Estimated ", beta[1], " for each participant (VarSignal)"))) +
xlab("Subject") +
ylab(expression(paste("Slope (ms / ", Delta," snr)"))) +
theme_bw() +
scale_x_continuous(breaks=c(0,seq(2,16,by=2)), labels=c("Group", "2", "4", "6", "8", "10", "12", "14", "16"))
print(pslopes)
dev.off()
pdf(file="lr_varsig.pdf")
load('meeting_27_03_17/subfit_ml_varsig.RData')
mu_pred_samples <- extract(lrfit, 'mu_pred')
all_plots <- list()
df_slopes <- NULL
for (ix in subslist) {
# Get mean slope & intercept from fit
beta_mu_ix <- summary(lrfit, pars=c(paste("beta_mu[", ix, ",1]", sep=""), paste("beta_mu[", ix,",2]", sep="")))$summary
mean_inter <- beta_mu_ix[paste("beta_mu[", ix, ",1]", sep=""), "mean"]
mean_slope <- beta_mu_ix[paste("beta_mu[", ix, ",2]", sep=""), "mean"]
q025_slope <- beta_mu_ix[paste("beta_mu[", ix, ",2]", sep=""), "2.5%"]
q975_slope <- beta_mu_ix[paste("beta_mu[", ix, ",2]", sep=""), "97.5%"]
df_slope_ix <- data.frame(subid = ix, mean = mean_slope, q025 = q025_slope, q975 = q975_slope)
df_slopes <- rbind(df_slopes, df_slope_ix)
# Get confidence intervals based on samples from fit
mu_pred_ix <- mu_pred_samples$mu_pred[,ix,]
quant_ix <- apply(mu_pred_ix, 2, quantile, probs=c(0.025,0.5,0.975))
df_ix <- data.frame(mu = quant_ix[2,], lowmu = quant_ix[1,], upmu = quant_ix[3,], snr=seq(0,30)/10)
ph <- ggplot(df_ix, aes(snr)) +
geom_ribbon(aes(ymin=lowmu, ymax=upmu), fill="gray50", alpha=0.4) +
geom_abline(intercept = mean_inter, slope = mean_slope, size=1, col="firebrick2") +
theme_bw() +
theme(axis.title.y=element_blank(), axis.title.x=element_blank()) +
scale_x_continuous(breaks=c(1,2,3), labels=c("l", "m", "h"), limits=c(0.9,3.1))
# Plot estimated means
pred_ii <- NULL
pred_ii$one <- extract(subfit$one, paste('mu_trans[',ix,']', sep=''))
pred_ii$one <- unlist(pred_ii$one, use.names=FALSE)
pred_ii$two <- extract(subfit$two, paste('mu_trans[',ix,']', sep=''))
pred_ii$two <- unlist(pred_ii$two, use.names=FALSE)
pred_ii$three <- extract(subfit$three, paste('mu_trans[',ix,']', sep=''))
pred_ii$three <- unlist(pred_ii$three, use.names=FALSE)
# Compute confidence intervals
ci_ii <- NULL
ci_ii$one <- quantile(pred_ii$one, c(0.025,0.975), names = FALSE)
ci_ii$two <- quantile(pred_ii$two, c(0.025,0.975), names = FALSE)
ci_ii$three <- quantile(pred_ii$three, c(0.025,0.975), names = FALSE)
# Plot means & confidence intervals
snrs <- c(1,2,3) # signal-to-noise ratios for one, two & three
mean_rts <- c(mean(pred_ii$one),
mean(pred_ii$two),
mean(pred_ii$three))
ci_low <- c(ci_ii$one[1], ci_ii$two[1], ci_ii$three[1]) # lower confidence interval
ci_up <- c(ci_ii$one[2], ci_ii$two[2], ci_ii$three[2]) # upper confidence interval
df_ii <- data.frame(condition=snrs, rt = mean_rts, low = ci_low, up = ci_up, subject=rep(ix,3))
ph <- ph + geom_point(data=df_ii, aes(x=condition, y=rt), shape=21, size=3, fill="white", alpha=0.7) +
geom_errorbar(data=df_ii, width=.2, aes(x=condition, ymin=low, ymax=up), alpha=0.5)
all_plots[[ix]] <- ph
}
grid.arrange(grobs=all_plots, ncol=4, left="Estimated mu (Correct)",
bottom="Signal-to-noise ratio",
top="Estimated LR and mu (VarSignal)")
# Plot individual and group slope
mu_beta_mu <- summary(lrfit, pars=c("mu_beta_mu"))$summary
mean_mu_mu <- mu_beta_mu["mu_beta_mu", "mean"]
q025_mu_mu <- mu_beta_mu["mu_beta_mu", "2.5%"]
q975_mu_mu <- mu_beta_mu["mu_beta_mu", "97.5%"]
df_mu_mu <- data.frame(subid = 0, mean = mean_mu_mu, q025 = q025_mu_mu, q975 = q975_mu_mu)
pslopes <- ggplot(df_slopes, aes(x=subid, y=mean)) +
geom_point(aes(x=subid, y=mean), shape=21, size=3, fill="white") +
geom_errorbar(width=.2, aes(ymin=q025, ymax=q975), alpha=0.5) +
geom_point(data=df_mu_mu, aes(x=subid, y=mean), shape=21, size=3, fill="red") +
geom_errorbar(data=df_mu_mu, width=.2, aes(ymin=q025, ymax=q975), col="red", alpha=0.5) +
geom_hline(yintercept=0, linetype=2) +
ggtitle(expression(paste("Estimated ", beta[1], " for each participant (VarSignal)"))) +
xlab("Subject") +
ylab(expression(paste("Slope (ms / ", Delta," snr)"))) +
theme_bw() +
scale_x_continuous(breaks=c(0,seq(2,16,by=2)), labels=c("Group", "2", "4", "6", "8", "10", "12", "14", "16"))
print(pslopes)
dev.off()
rm(list=ls())
source('analyse_bayes.R')
save(subfit, file="subfit_ml_varnoise.RData")
source('analyse_bayes_lr.R')
source('analyse_bayes.R')
source('analyse_bayes_lr.R')
save(lrfit, file="meeting_27_03_17/lrfit_varsig.RData")
q()
rm(list=ls())
q()
rm(list=ls())
seq(2,1)
seq(2,2)
seq(1,1)
seq(1,2)
seq(1,3)
seq(2,2)
rm(list=ls())
source('plot_raw_rts.R')
install.packages("ggplot2")
install.packages("codetools")
install.packages("ggplot2")
q()
install.packages("ggplot2")
rm(list=ls())
source('plot_raw_rts.R')
source('plot_raw_rts.R')
source('plot_raw_rts.R')
source('plot_raw_rts.R')
source('plot_raw_rts.R')
install.packages("rstan")
q()
rm(list=ls())
source('plot_raw_rts.R')
source('analyse_bayes_lr.R')
q()
